3.2 Alert
An alert is an element that displays a brief, important message in a way that attracts the user's attention without interrupting the user's task. Dynamically rendered alerts are automatically announced by most screen readers, and in some operating systems, they may trigger an alert sound. It is important to note that, at this time, screen readers do not inform users of alerts that are present on the page before page load completes.

Because alerts are intended to provide important and potentially time-sensitive information without interfering with the user's ability to continue working, it is crucial they do not affect keyboard focus. The alert dialog is designed for situations where interrupting work flow is necessary.

It is also important to avoid designing alerts that disappear automatically. An alert that disappears too quickly can lead to failure to meet WCAG 2.0 success criterion 2.2.3. Another critical design consideration is the frequency of interruption caused by alerts. Frequent interruptions inhibit usability for people with visual and cognitive disabilities, which makes meeting the requirements of WCAG 2.0 success criterion 2.2.4 more difficult.

Example
Alert Example

Keyboard Interaction
An alert (WAI-ARIA live region) does not require any keyboard interaction.

WAI-ARIA Roles, States, and Properties
The widget has a role of alert.

3.3 Alert and Message Dialogs
An alert dialog is a modal dialog that interrupts the user's workflow to communicate an important message and acquire a response. Examples include action confirmation prompts and error message confirmations. The alertdialog role enables assistive technologies and browsers to distinguish alert dialogs from other dialogs so they have the option of giving alert dialogs special treatment, such as playing a system alert sound.

Example
Alert Dialog Example: A confirmation prompt that demonstrates an alert dialog.

Keyboard Interaction
See the keyboard interaction section for the modal dialog pattern.

WAI-ARIA Roles, States, and Properties
The element that contains all elements of the dialog, including the alert message and any dialog buttons, has role alertdialog.
The element with role alertdialog has either:
A value for aria-labelledby that refers to the element containing the title of the dialog if the dialog has a visible label.
A value for aria-label if the dialog does not have a visible label.
The element with role alertdialog has a value set for aria-describedby that refers to the element containing the alert message.
3.4 Breadcrumb
A breadcrumb trail consists of a list of links to the parent pages of the current page in hierarchical order. It helps users find their place within a website or web application. Breadcrumbs are often placed horizontally before a page's main content.

Example
Breadcrumb design pattern example

Keyboard Interaction
Not applicable.

WAI-ARIA Roles, States, and Properties
Breadcrumb trail is contained within a navigation landmark region.
The landmark region is labelled via aria-label or aria-labelledby.
The link to the current page has aria-current set to page. If the element representing the current page is not a link, aria-current is optional.
3.5 Button
A button is a widget that enables users to trigger an action or event, such as submitting a form, opening a dialog, canceling an action, or performing a delete operation. A common convention for informing users that a button launches a dialog is to append "…" (ellipsis) to the button label, e.g., "Save as…".

In addition to the ordinary button widget, WAI-ARIA supports 2 other types of buttons:

Toggle button: A two-state button that can be either off (not pressed) or on (pressed). To tell assistive technologies that a button is a toggle button, specify a value for the attribute aria-pressed. For example, a button labelled mute in an audio player could indicate that sound is muted by setting the pressed state true. Important: it is critical the label on a toggle does not change when its state changes. In this example, when the pressed state is true, the label remains "Mute" so a screen reader would say something like "Mute toggle button pressed". Alternatively, if the design were to call for the button label to change from "Mute" to "Unmute," the aria-pressed attribute would not be needed.
Menu button: as described in the menu button pattern, a button is revealed to assistive technologies as a menu button if it has the property aria-haspopup set to either menu or true.
NOTE
The types of actions performed by buttons are distinctly different from the function of a link (see link pattern). It is important that both the appearance and role of a widget match the function it provides. Nevertheless, elements occasionally have the visual style of a link but perform the action of a button. In such cases, giving the element role button helps assistive technology users understand the function of the element. However, a better solution is to adjust the visual design so it matches the function and ARIA role.

Examples
Button Examples: Examples of clickable HTML div and span elements made into accessible command and toggle buttons.

Keyboard Interaction
When the button has focus:

Space: Activates the button.
Enter: Activates the button.
Following button activation, focus is set depending on the type of action the button performs. For example:
If activating the button opens a dialog, the focus moves inside the dialog. (see dialog pattern)
If activating the button closes a dialog, focus typically returns to the button that opened the dialog unless the function performed in the dialog context logically leads to a different element. For example, activating a cancel button in a dialog returns focus to the button that opened the dialog. However, if the dialog were confirming the action of deleting the page from which it was opened, the focus would logically move to a new context.
If activating the button does not dismiss the current context, then focus typically remains on the button after activation, e.g., an Apply or Recalculate button.
If the button action indicates a context change, such as move to next step in a wizard or add another search criteria, then it is often appropriate to move focus to the starting point for that action.
If the button is activated with a shortcut key, the focus usually remains in the context from which the shortcut key was activated. For example, if Alt + U were assigned to an "Up" button that moves the currently focused item in a list one position higher in the list, pressing Alt + U when the focus is in the list would not move the focus from the list.
WAI-ARIA Roles, States, and Properties
The button has role of button.
The button has an accessible label. By default, the accessible name is computed from any text content inside the button element. However, it can also be provided with aria-labelledby or aria-label.
If a description of the button's function is present, the button element has aria-describedby set to the ID of the element containing the description.
When the action associated with a button is unavailable, the button has aria-disabled set to true.
If the button is a toggle button, it has an aria-pressed state. When the button is toggled on, the value of this state is true, and when toggled off, the state is false.
3.6 Carousel (Slide Show or Image Rotator)
A carousel presents a set of items, referred to as slides, by sequentially displaying a subset of one or more slides. Typically, one slide is displayed at a time, and users can activate a next or previous slide control that hides the current slide and "rotates" the next or previous slide into view. In some implementations, rotation automatically starts when the page loads, and it may also automatically stop once all the slides have been displayed. While a slide may contain any type of content, image carousels where each slide contains nothing more than a single image are common.

Ensuring all users can easily control and are not adversely effected by slide rotation is an essential aspect of making carousels accessible. For instance, the screen reader experience can be confusing and disorienting if slides that are not visible on screen are incorrectly hidden, e.g., displayed off-screen. Similarly, if slides rotate automatically and a screen reader user is not aware of the rotation, the user may read an element on slide one, execute the screen reader command for next element, and, instead of hearing the next element on slide one, hear an element from slide 2 without any knowledge that the element just announced is from an entirely new context.

Features needed to provide sufficient rotation control include:

Buttons for displaying the previous and next slides.
Optionally, a control, or group of controls, for choosing a specific slide to display. For example, slide picker controls can be marked up as tabs in a tablist with the slide represented by a tabpanel element.
If the carousel can automatically rotate, it also:
Has a button for stopping and restarting rotation. This is particularly important for supporting assistive technologies operating in a mode that does not move either keyboard focus or the mouse.
Stops rotating when keyboard focus enters the carousel. It does not restart unless the user explicitly requests it to do so.
Stops rotating whenever the mouse is hovering over the carousel.
Example
Auto-Rotating Image Carousel Example: A basic image carousel that demonstrates the accessibility features necessary for carousels that rotate automatically on page load.

Terms
The following terms are used to describe components of a carousel.

Slide
A single content container within a set of content containers that hold the content to be presented by the carousel.
Rotation Control
An interactive element that stops and starts automatic slide rotation.
Next Slide Control
An interactive element, often styled as an arrow, that displays the next slide in the rotation sequence.
Previous Slide Control
An interactive element, often styled as an arrow, that displays the previous slide in the rotation sequence.
Slide Picker Controls
A group of elements, often styled as small dots, that enable the user to pick a specific slide in the rotation sequence to display.
Keyboard Interaction
If the carousel has an auto-rotate feature, automatic slide rotation stops when any element in the carousel receives keyboard focus. It does not resume unless the user activates the rotation control.
Tab and Shift + Tab: Move focus through the interactive elements of the carousel as specified by the page tab sequence -- scripting for Tab is not necessary.
Button elements implement the keyboard interaction defined in the button pattern. Note: Activating the rotation control, next slide, and previous slide do not move focus, so users may easily repetitively activate them as many times as desired.
If present, the rotation control is the first element in the Tab sequence inside the carousel. It is essential that it precede the rotating content so it can be easily located.
If tab elements are used for slide picker controls, they implement the keyboard interaction defined in the Tabs Pattern.
WAI-ARIA Roles, States, and Properties
This section describes the element composition for three styles of carousels:

Basic: Has rotation, previous slide, and next slide controls but no slide picker controls.
Tabbed: Has basic controls plus a single tab stop for slide picker controls implemented using the tabs pattern.
Grouped: Has basic controls plus a series of tab stops in a group of slide picker controls where each control implements the button pattern. Because each slide selector button adds an element to the page tab sequence, this style is the least friendly for keyboard users.
Basic carousel elements
A carousel container element that encompasses all components of the carousel, including both carousel controls and slides, has either role region or role group. The most appropriate role for the carousel container depends on the information architecture of the page. See the landmark regions guidance to determine whether the carousel warrants being designated as a landmark region.
The carousel container has the aria-roledescription property set to carousel.
If the carousel has a visible label, its accessible label is provided by the property aria-labelledby on the carousel container set to the ID of the element containing the visible label. Otherwise, an accessible label is provided by the property aria-label set on the carousel container. Note that since the aria-roledescription is set to "carousel", the label does not contain the word "carousel".
The rotation control, next slide control, and previous slide control are either native button elements (recommended) or implement the button pattern.
The rotation control has an accessible label provided by either its inner text or aria-label. The label changes to match the action the button will perform, e.g., "Stop slide rotation" or "Start slide rotation". A label that changes when the button is activated clearly communicates both that slide content can change automatically and when it is doing so. Note that since the label changes, the rotation control does not have any states, e.g., aria-pressed, specified.
Each slide container has role group with the property aria-roledescription set to slide.
Each slide has an accessible name:
If a slide has a visible label, its accessible label is provided by the property aria-labelledby on the slide container set to the ID of the element containing the visible label.
Otherwise, an accessible label is provided by the property aria-label set on the slide container.
If unique names that identify the slide content are not available, a number and set size can serve as a meaningful alternative, e.g., "3 of 10". Note: Normally, including set position and size information in an accessible name is not appropriate. An exception is helpful in this implementation because group elements do not support aria-setsize or aria-posinset. The tabbed carousel implementation pattern does not have this limitation.
Note that since the aria-roledescription is set to "slide", the label does not contain the word "slide."
Optionally, an element wrapping the set of slide elements has aria-atomic set to false and aria-live set to:
off: if the carousel is automatically rotating.
polite: if the carousel is NOT automatically rotating.
Tabbed Carousel Elements
The structure of a tabbed carousel is the same as a basic carousel except that:

Each slide container has role tabpanel in lieu of group, and it does not have the aria-roledescription property.
It has slide picker controls implemented using the tabs pattern where:
Each control is a tab element, so activating a tab displays the slide associated with that tab.
The accessible name of each tab indicates which slide it will display by including the name or number of the slide, e.g., "Slide 3". Slide names are preferable if each slide has a unique name.
The set of controls is grouped in a tablist element with an accessible name provided by the value of aria-label that identifies the purpose of the tabs, e.g., "Choose slide to display."
The tab, tablist, and tabpanel implement the properties specified in the tabs pattern.
Grouped Carousel Elements
A grouped carousel has the same structure as a basic carousel, but it also includes slide picker controls where:

The set of slide picker controls is contained in an element with role group.
The group containing the picker controls has an accessible label provided by the value of aria-label that identifies the purpose of the controls, e.g., "Choose slide to display."
Each picker control is a native button element (recommended) or implements the button pattern.
The accessible name of each picker button matches the name of the slide it displays. One technique for accomplishing this is to set aria-labelledby to a value that references the slide group element.
The picker button representing the currently displayed slide has the property aria-disabled set to true. Note: aria-disabled is preferable to the HTML disabled attribute because this is a circumstance where screen reader users benefit from the disabled button being included in the page Tab sequence.
3.7 Checkbox
WAI-ARIA supports two types of checkbox widgets:

Dual-state: The most common type of checkbox, it allows the user to toggle between two choices -- checked and not checked.
Tri-state: This type of checkbox supports an additional third state known as partially checked.
One common use of a tri-state checkbox can be found in software installers where a single tri-state checkbox is used to represent and control the state of an entire group of install options. And, each option in the group can be individually turned on or off with a dual state checkbox.

If all options in the group are checked, the overall state is represented by the tri-state checkbox displaying as checked.
If some of the options in the group are checked, the overall state is represented with the tri-state checkbox displaying as partially checked.
If none of the options in the group are checked, the overall state of the group is represented with the tri-state checkbox displaying as not checked.
The user can use the tri-state checkbox to change all options in the group with a single action:

Checking the overall checkbox checks all options in the group.
Unchecking the overall checkbox will uncheck all options in the group.
And, In some implementations, the system may remember which options were checked the last time the overall status was partially checked. If this feature is provided, activating the overall checkbox a third time recreates that partially checked state where only some options in the group are checked.
